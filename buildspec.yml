version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - pip install --upgrade pip
      - pip install --upgrade aws-sam-cli
  build:
    commands:
      - echo "Starting ReSCO AIML Assessment"
      - echo "Multi-account scan is $MULTI_ACCOUNT_SCAN"
      - cd resco-aiml-assessment
      - ls -la
      - sam build --use-container --template template-multi-account.yaml
      - echo "Build completed, checking build directory:"
      - ls -la .aws-sam/build/
      - |
        if [[ $MULTI_ACCOUNT_SCAN = 'true' ]]; then
          echo "Getting list of accounts to scan"
          if [[ $MULTI_ACCOUNT_LIST_OVERRIDE != '' ]]; then
            account_list=$MULTI_ACCOUNT_LIST_OVERRIDE
          else
            account_list=$(aws organizations list-accounts --query 'Accounts[?Status==`ACTIVE`].Id' --output text)
          fi
          echo "Will scan accounts: $account_list"
          for accountId in $account_list; do
            echo "Processing account $accountId"
            if [[ $accountId == $AWS_ACCOUNT_ID ]]; then
              echo "Skipping management account $accountId - will be handled separately"
              continue
            fi
            aws sts assume-role --role-arn arn:$AWS_PARTITION:iam::$accountId:role/service-role/$RESCO_ROLE --role-session-name ReSCOAssessment > /tmp/creds.json || continue
            export AWS_ACCESS_KEY_ID=$(cat /tmp/creds.json | jq -r '.Credentials.AccessKeyId')
            export AWS_SECRET_ACCESS_KEY=$(cat /tmp/creds.json | jq -r '.Credentials.SecretAccessKey')
            export AWS_SESSION_TOKEN=$(cat /tmp/creds.json | jq -r '.Credentials.SessionToken')
            echo "Deploying to account $accountId"
            aws cloudformation delete-stack --stack-name aws-sam-cli-managed-default || echo "No managed stack to delete in $accountId"
            sam deploy --template-file .aws-sam/build/template.yaml --stack-name resco-aiml-security-$accountId --capabilities CAPABILITY_IAM --no-confirm-changeset --resolve-s3 --parameter-overrides BucketName=$BUCKET_REPORT --region $AWS_DEFAULT_REGION || echo "Deploy failed for $accountId"
            STATE_MACHINE_ARN=$(aws cloudformation describe-stacks --stack-name resco-aiml-security-$accountId --query 'Stacks[0].Outputs[?OutputKey==`AIMLAssessmentStateMachineArn`].OutputValue' --output text 2>/dev/null)
            if [[ $STATE_MACHINE_ARN != "" ]]; then
              EXECUTION_ARN=$(aws stepfunctions start-execution --state-machine-arn $STATE_MACHINE_ARN --input "{\"accountId\":\"$accountId\"}" --query 'executionArn' --output text)
              echo "Started execution: $EXECUTION_ARN"
            fi
            unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
          done
          echo "Deploying to management account $AWS_ACCOUNT_ID"
          sam deploy --template-file .aws-sam/build/template.yaml --stack-name resco-aiml-security-mgmt --capabilities CAPABILITY_IAM --no-confirm-changeset --s3-bucket $BUCKET_REPORT --parameter-overrides BucketName=$BUCKET_REPORT --region $AWS_DEFAULT_REGION || echo "Deploy failed for management account"
          STATE_MACHINE_ARN=$(aws cloudformation describe-stacks --stack-name resco-aiml-security-mgmt --query 'Stacks[0].Outputs[?OutputKey==`AIMLAssessmentStateMachineArn`].OutputValue' --output text 2>/dev/null)
          if [[ $STATE_MACHINE_ARN != "" ]]; then
            MGMT_EXECUTION_ARN=$(aws stepfunctions start-execution --state-machine-arn $STATE_MACHINE_ARN --input "{\"accountId\":\"$AWS_ACCOUNT_ID\"}" --query 'executionArn' --output text)
            echo "Started management account execution: $MGMT_EXECUTION_ARN"
          fi
        else
          echo "Single account deployment"
          sam deploy --template-file .aws-sam/build/template.yaml --stack-name resco-aiml-security --capabilities CAPABILITY_IAM --no-confirm-changeset --s3-bucket $BUCKET_REPORT --parameter-overrides BucketName=$BUCKET_REPORT
          STATE_MACHINE_ARN=$(aws cloudformation describe-stacks --stack-name resco-aiml-security --query 'Stacks[0].Outputs[?OutputKey==`AIMLAssessmentStateMachineArn`].OutputValue' --output text)
          aws stepfunctions start-execution --state-machine-arn $STATE_MACHINE_ARN --input "{\"accountId\":\"$AWS_ACCOUNT_ID\"}"
        fi
  post_build:
    commands:
      - echo "Assessment completed. Results in S3:$BUCKET_REPORT"
      - |
        if [[ $MULTI_ACCOUNT_SCAN = 'true' ]]; then
          echo "Getting list of accounts to scan"
          if [[ $MULTI_ACCOUNT_LIST_OVERRIDE != '' ]]; then
            account_list=$MULTI_ACCOUNT_LIST_OVERRIDE
          else
            account_list=$(aws organizations list-accounts --query 'Accounts[?Status==`ACTIVE`].Id' --output text)
          fi
          echo "Account list for post-build processing: $account_list"
          
          # Clean up any existing account-files directory to ensure fresh start
          echo "Cleaning up existing account-files directory"
          rm -rf /tmp/account-files
          mkdir -p /tmp/account-files
          
          echo "Copying files from respective account S3 buckets to CodeBuild environment"
          for accountId in $account_list; do
            echo "Processing account $accountId"
            if [[ $accountId == $AWS_ACCOUNT_ID ]]; then
              # Management account - use mgmt stack name
              STACK_NAME="resco-aiml-security-mgmt"
            else
              # Member account - assume role and use account-specific stack name
              aws sts assume-role --role-arn arn:$AWS_PARTITION:iam::$accountId:role/service-role/$RESCO_ROLE --role-session-name ReSCOAssessment > /tmp/creds.json || continue
              export AWS_ACCESS_KEY_ID=$(cat /tmp/creds.json | jq -r '.Credentials.AccessKeyId')
              export AWS_SECRET_ACCESS_KEY=$(cat /tmp/creds.json | jq -r '.Credentials.SecretAccessKey')
              export AWS_SESSION_TOKEN=$(cat /tmp/creds.json | jq -r '.Credentials.SessionToken')
              STACK_NAME="resco-aiml-security-$accountId"
            fi
            
            # Wait for Step Function to complete before copying files
            STATE_MACHINE_ARN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`AIMLAssessmentStateMachineArn`].OutputValue' --output text 2>/dev/null)
            if [[ $STATE_MACHINE_ARN != "" ]]; then
              echo "Waiting for Step Function completion in account $accountId..."
              EXECUTION_ARN=$(aws stepfunctions list-executions --state-machine-arn $STATE_MACHINE_ARN --status-filter RUNNING --max-items 1 --query 'executions[0].executionArn' --output text 2>/dev/null)
              if [[ $EXECUTION_ARN != "" && $EXECUTION_ARN != "None" ]]; then
                timeout=300
                elapsed=0
                while [[ $elapsed -lt $timeout ]]; do
                  STATUS=$(aws stepfunctions describe-execution --execution-arn $EXECUTION_ARN --query 'status' --output text 2>/dev/null)
                  if [[ $STATUS == "SUCCEEDED" || $STATUS == "FAILED" || $STATUS == "TIMED_OUT" || $STATUS == "ABORTED" ]]; then
                    echo "Step Function for account $accountId completed with status: $STATUS"
                    break
                  fi
                  echo "Step Function for account $accountId still running... waiting 30 seconds"
                  sleep 30
                  elapsed=$((elapsed + 30))
                done
              fi
            fi
            
            # Now copy files from the completed assessment
            ACCOUNT_BUCKET=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`AssessmentBucketName`].OutputValue' --output text 2>/dev/null)
            if [[ $ACCOUNT_BUCKET != "" ]]; then
              echo "Copying files from $ACCOUNT_BUCKET to local storage"
              mkdir -p /tmp/account-files/$accountId
              # List bucket contents first for debugging
              echo "Bucket contents for $accountId:"
              aws s3 ls s3://$ACCOUNT_BUCKET/ || echo "Failed to list bucket contents"
              aws s3 cp s3://$ACCOUNT_BUCKET/ /tmp/account-files/$accountId/ --recursive --exclude "*" --include "*.csv" --include "*.html" --exclude "*/" || echo "No files to copy from $accountId"
              # Show what was actually copied
              echo "Files copied for $accountId:"
              ls -la /tmp/account-files/$accountId/ || echo "No files in directory"
              # Flatten any nested directories
              find /tmp/account-files/$accountId -type f \( -name "*.csv" -o -name "*.html" \) -exec mv {} /tmp/account-files/$accountId/ \; 2>/dev/null || true
              find /tmp/account-files/$accountId -type d -empty -delete 2>/dev/null || true
            else
              echo "No assessment bucket found for $accountId (STACK_NAME: $STACK_NAME)"
            fi
            
            if [[ $accountId != $AWS_ACCOUNT_ID ]]; then
              unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            fi
          done
          
          echo "Uploading files to management account S3 bucket and creating consolidated report"
          pip3 install beautifulsoup4
          
          # Debug: Show which directories exist
          echo "Available account directories:"
          ls -la /tmp/account-files/ || echo "No account-files directory"
          
          # Upload files from local storage to management account bucket organized by account (overwrite)
          for accountId in $account_list; do
            if [[ -d /tmp/account-files/$accountId ]]; then
              echo "Uploading files for account $accountId (overwriting existing)"
              aws s3 sync /tmp/account-files/$accountId/ s3://$BUCKET_REPORT/$accountId/ || echo "Failed to upload files for $accountId"
            else
              echo "No directory found for account $accountId"
            fi
          done
          
          # Create consolidated HTML report using separate script
          python3 ../consolidate_html_reports.py
        fi
      - echo "Assessment and consolidation completed"