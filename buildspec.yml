version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - pip install --upgrade pip
      - pip install --upgrade aws-sam-cli
  build:
    commands:
      - echo "Starting ReSCO AIML Assessment"
      - echo "Multi-account scan is $MULTI_ACCOUNT_SCAN"
      - cd resco-aiml-assessment
      - ls -la
      - sam build --use-container --template template-multi-account.yaml
      - echo "Build completed, checking build directory:"
      - ls -la .aws-sam/build/
      - |
        if [[ $MULTI_ACCOUNT_SCAN = 'true' ]]; then
          echo "Getting list of accounts to scan"
          if [[ $MULTI_ACCOUNT_LIST_OVERRIDE != '' ]]; then
            account_list=$MULTI_ACCOUNT_LIST_OVERRIDE
          else
            account_list=$(aws organizations list-accounts --query 'Accounts[?Status==`ACTIVE`].Id' --output text)
          fi
          echo "Will scan accounts: $account_list"
          for accountId in $account_list; do
            echo "Processing account $accountId"
            if [[ $accountId == $AWS_ACCOUNT_ID ]]; then
              echo "Skipping management account $accountId - will be handled separately"
              continue
            fi
            aws sts assume-role --role-arn arn:$AWS_PARTITION:iam::$accountId:role/service-role/$RESCO_ROLE --role-session-name ReSCOAssessment > /tmp/creds.json || continue
            export AWS_ACCESS_KEY_ID=$(cat /tmp/creds.json | jq -r '.Credentials.AccessKeyId')
            export AWS_SECRET_ACCESS_KEY=$(cat /tmp/creds.json | jq -r '.Credentials.SecretAccessKey')
            export AWS_SESSION_TOKEN=$(cat /tmp/creds.json | jq -r '.Credentials.SessionToken')
            echo "Deploying to account $accountId"
            aws cloudformation delete-stack --stack-name aws-sam-cli-managed-default || echo "No managed stack to delete in $accountId"
            sam deploy --template-file .aws-sam/build/template.yaml --stack-name resco-aiml-security-$accountId --capabilities CAPABILITY_IAM --no-confirm-changeset --resolve-s3 --parameter-overrides BucketName=$BUCKET_REPORT --region $AWS_DEFAULT_REGION || echo "Deploy failed for $accountId"
            STATE_MACHINE_ARN=$(aws cloudformation describe-stacks --stack-name resco-aiml-security-$accountId --query 'Stacks[0].Outputs[?OutputKey==`AIMLAssessmentStateMachineArn`].OutputValue' --output text 2>/dev/null)
            if [[ $STATE_MACHINE_ARN != "" ]]; then
              EXECUTION_ARN=$(aws stepfunctions start-execution --state-machine-arn $STATE_MACHINE_ARN --input "{\"accountId\":\"$accountId\"}" --query 'executionArn' --output text)
              echo "Started execution: $EXECUTION_ARN"
            fi
            unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
          done
          echo "Deploying to management account $AWS_ACCOUNT_ID"
          sam deploy --template-file .aws-sam/build/template.yaml --stack-name resco-aiml-security-mgmt --capabilities CAPABILITY_IAM --no-confirm-changeset --s3-bucket $BUCKET_REPORT --parameter-overrides BucketName=$BUCKET_REPORT --region $AWS_DEFAULT_REGION || echo "Deploy failed for management account"
          STATE_MACHINE_ARN=$(aws cloudformation describe-stacks --stack-name resco-aiml-security-mgmt --query 'Stacks[0].Outputs[?OutputKey==`AIMLAssessmentStateMachineArn`].OutputValue' --output text 2>/dev/null)
          if [[ $STATE_MACHINE_ARN != "" ]]; then
            MGMT_EXECUTION_ARN=$(aws stepfunctions start-execution --state-machine-arn $STATE_MACHINE_ARN --input "{\"accountId\":\"$AWS_ACCOUNT_ID\"}" --query 'executionArn' --output text)
            echo "Started management account execution: $MGMT_EXECUTION_ARN"
          fi
        else
          echo "Single account deployment"
          sam deploy --template-file .aws-sam/build/template.yaml --stack-name resco-aiml-security --capabilities CAPABILITY_IAM --no-confirm-changeset --s3-bucket $BUCKET_REPORT --parameter-overrides BucketName=$BUCKET_REPORT
          STATE_MACHINE_ARN=$(aws cloudformation describe-stacks --stack-name resco-aiml-security --query 'Stacks[0].Outputs[?OutputKey==`AIMLAssessmentStateMachineArn`].OutputValue' --output text)
          aws stepfunctions start-execution --state-machine-arn $STATE_MACHINE_ARN --input "{\"accountId\":\"$AWS_ACCOUNT_ID\"}"
        fi
  post_build:
    commands:
      - echo "Assessment completed. Results in S3:$BUCKET_REPORT"
      - |
        if [[ $MULTI_ACCOUNT_SCAN = 'true' ]]; then
          echo "Getting list of accounts to scan"
          if [[ $MULTI_ACCOUNT_LIST_OVERRIDE != '' ]]; then
            account_list=$MULTI_ACCOUNT_LIST_OVERRIDE
          else
            account_list=$(aws organizations list-accounts --query 'Accounts[?Status==`ACTIVE`].Id' --output text)
          fi
          
          echo "Copying files from respective account S3 buckets to CodeBuild environment"
          for accountId in $account_list; do
            if [[ $accountId == $AWS_ACCOUNT_ID ]]; then
              echo "Processing management account $accountId"
              MGMT_BUCKET=$(aws cloudformation describe-stacks --stack-name resco-aiml-security-mgmt --query 'Stacks[0].Outputs[?OutputKey==`AssessmentBucketName`].OutputValue' --output text 2>/dev/null)
              if [[ $MGMT_BUCKET != "" ]]; then
                echo "Copying management account files to local storage"
                mkdir -p /tmp/account-files/$accountId
                aws s3 cp s3://$MGMT_BUCKET/ /tmp/account-files/$accountId/ --recursive --exclude "*" --include "*.csv" --include "*.html" || echo "No files to copy from management account"
              fi
            else
              echo "Processing member account $accountId"
              aws sts assume-role --role-arn arn:$AWS_PARTITION:iam::$accountId:role/service-role/$RESCO_ROLE --role-session-name ReSCOAssessment > /tmp/creds.json || continue
              export AWS_ACCESS_KEY_ID=$(cat /tmp/creds.json | jq -r '.Credentials.AccessKeyId')
              export AWS_SECRET_ACCESS_KEY=$(cat /tmp/creds.json | jq -r '.Credentials.SecretAccessKey')
              export AWS_SESSION_TOKEN=$(cat /tmp/creds.json | jq -r '.Credentials.SessionToken')
              
              ACCOUNT_BUCKET=$(aws cloudformation describe-stacks --stack-name resco-aiml-security-$accountId --query 'Stacks[0].Outputs[?OutputKey==`AssessmentBucketName`].OutputValue' --output text 2>/dev/null)
              if [[ $ACCOUNT_BUCKET != "" ]]; then
                echo "Copying files from $ACCOUNT_BUCKET to local storage"
                mkdir -p /tmp/account-files/$accountId
                aws s3 cp s3://$ACCOUNT_BUCKET/ /tmp/account-files/$accountId/ --recursive --exclude "*" --include "*.csv" --include "*.html" || echo "No files to copy from $accountId"
              fi
              unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            fi
          done
          
          echo "Uploading files to management account S3 bucket and creating consolidated report"
          pip3 install beautifulsoup4
          
          # Get management account assessment bucket name
          MGMT_ASSESSMENT_BUCKET=$(aws cloudformation describe-stacks --stack-name resco-aiml-security-mgmt --query 'Stacks[0].Outputs[?OutputKey==`AssessmentBucketName`].OutputValue' --output text 2>/dev/null)
          
          # Upload files from local storage to management account assessment bucket organized by account
          for accountId in $account_list; do
            if [[ -d /tmp/account-files/$accountId ]]; then
              echo "Uploading files for account $accountId"
              aws s3 cp /tmp/account-files/$accountId/ s3://$MGMT_ASSESSMENT_BUCKET/$accountId/ --recursive || echo "Failed to upload files for $accountId"
            fi
          done
          
          # Create consolidated HTML report using separate script
          python3 ../consolidate_html_reports.py
        fi
      - echo "Assessment and consolidation completed"